REALTIME MESSAGING IMPLEMENTATION GUIDE
=====================================

1. Backend Implementation (Django Channels)
-----------------------------------------

First, install required packages:
```bash
pip install channels channels-redis
```

Update settings.py:
```python
INSTALLED_APPS = [
    # ...
    'channels',
]

ASGI_APPLICATION = 'your_project.asgi.application'

CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            "hosts": [('127.0.0.1', 6379)],
        },
    },
}
```

Create consumers.py:
```python
import json
from channels.generic.websocket import AsyncWebsocketConsumer
from channels.db import database_sync_to_async
from .models import Message
from django.contrib.auth.models import User

class ChatConsumer(AsyncWebsocketConsumer):
    async def connect(self):
        self.user = self.scope["user"]
        if not self.user.is_authenticated:
            await self.close()
            return

        # Create a unique room name for each user
        self.room_name = f"user_{self.user.id}"
        self.room_group_name = f"chat_{self.room_name}"

        # Join room group
        await self.channel_layer.group_add(
            self.room_group_name,
            self.channel_name
        )
        await self.accept()

    async def disconnect(self, close_code):
        # Leave room group
        await self.channel_layer.group_discard(
            self.room_group_name,
            self.channel_name
        )

    async def receive(self, text_data):
        data = json.loads(text_data)
        message_type = data.get('type')
        
        if message_type == 'message':
            await self.handle_message(data)
        elif message_type == 'typing':
            await self.handle_typing(data)

    async def handle_message(self, data):
        message = await self.save_message(data)
        # Send message to receiver's room
        await self.channel_layer.group_send(
            f"chat_user_{data['receiver']}",
            {
                'type': 'chat_message',
                'message': {
                    'id': message.id,
                    'sender': message.sender.id,
                    'sender_username': message.sender.username,
                    'receiver': message.receiver.id,
                    'receiver_username': message.receiver.username,
                    'content': message.content,
                    'created_at': message.created_at.isoformat(),
                    'is_read': message.is_read,
                }
            }
        )

    async def handle_typing(self, data):
        # Send typing status to receiver
        await self.channel_layer.group_send(
            f"chat_user_{data['receiver']}",
            {
                'type': 'typing_status',
                'user_id': self.user.id,
                'is_typing': data['is_typing']
            }
        )

    async def chat_message(self, event):
        # Send message to WebSocket
        await self.send(text_data=json.dumps({
            'type': 'message',
            'message': event['message']
        }))

    async def typing_status(self, event):
        # Send typing status to WebSocket
        await self.send(text_data=json.dumps({
            'type': 'typing',
            'user_id': event['user_id'],
            'is_typing': event['is_typing']
        }))

    @database_sync_to_async
    def save_message(self, data):
        receiver = User.objects.get(id=data['receiver'])
        return Message.objects.create(
            sender=self.user,
            receiver=receiver,
            content=data['content']
        )
```

Update routing.py:
```python
from django.urls import re_path
from . import consumers

websocket_urlpatterns = [
    re_path(r'ws/chat/$', consumers.ChatConsumer.as_asgi()),
]
```

2. Frontend Implementation (Flutter)
----------------------------------

First, add the web_socket_channel package to pubspec.yaml:
```yaml
dependencies:
  web_socket_channel: ^2.4.0
```

Create a WebSocket service:
```dart
class WebSocketService {
  WebSocketChannel? _channel;
  final String baseUrl;
  final String token;
  final Function(Map<String, dynamic>) onMessage;
  final Function(Map<String, dynamic>) onTyping;

  WebSocketService({
    required this.baseUrl,
    required this.token,
    required this.onMessage,
    required this.onTyping,
  });

  void connect() {
    final wsUrl = baseUrl.replaceFirst('http', 'ws');
    _channel = WebSocketChannel.connect(
      Uri.parse('$wsUrl/ws/chat/'),
    );

    _channel!.stream.listen(
      (data) {
        final message = json.decode(data);
        switch (message['type']) {
          case 'message':
            onMessage(message['message']);
            break;
          case 'typing':
            onTyping(message);
            break;
        }
      },
      onError: (error) {
        print('WebSocket Error: $error');
        // Implement reconnection logic
        Future.delayed(Duration(seconds: 5), connect);
      },
      onDone: () {
        print('WebSocket Connection Closed');
        // Implement reconnection logic
        Future.delayed(Duration(seconds: 5), connect);
      },
    );
  }

  void sendMessage(int receiverId, String content) {
    if (_channel != null) {
      _channel!.sink.add(json.encode({
        'type': 'message',
        'receiver': receiverId,
        'content': content,
      }));
    }
  }

  void sendTypingStatus(int receiverId, bool isTyping) {
    if (_channel != null) {
      _channel!.sink.add(json.encode({
        'type': 'typing',
        'receiver': receiverId,
        'is_typing': isTyping,
      }));
    }
  }

  void disconnect() {
    _channel?.sink.close();
    _channel = null;
  }
}
```

Update ChatScreen:
```dart
class _ChatScreenState extends State<ChatScreen> {
  final MessageService _messageService = MessageService(
    baseUrl: 'YOUR_API_BASE_URL',
    token: 'YOUR_ACCESS_TOKEN',
  );
  late WebSocketService _wsService;
  List<Message> _messages = [];
  bool _isLoading = true;
  bool _isTyping = false;
  Timer? _typingTimer;
  final _messageController = TextEditingController();

  @override
  void initState() {
    super.initState();
    _loadMessages();
    _initializeWebSocket();
  }

  void _initializeWebSocket() {
    _wsService = WebSocketService(
      baseUrl: 'YOUR_API_BASE_URL',
      token: 'YOUR_ACCESS_TOKEN',
      onMessage: _handleNewMessage,
      onTyping: _handleTypingStatus,
    );
    _wsService.connect();
  }

  void _handleNewMessage(Map<String, dynamic> message) {
    setState(() {
      _messages.insert(0, Message.fromJson(message));
    });
  }

  void _handleTypingStatus(Map<String, dynamic> data) {
    if (data['user_id'] == widget.recipientId) {
      setState(() {
        _isTyping = data['is_typing'];
      });
    }
  }

  void _onMessageChanged(String text) {
    if (_typingTimer?.isActive ?? false) {
      _typingTimer!.cancel();
    }
    _wsService.sendTypingStatus(widget.recipientId, true);
    _typingTimer = Timer(Duration(seconds: 2), () {
      _wsService.sendTypingStatus(widget.recipientId, false);
    });
  }

  Future<void> _sendMessage() async {
    if (_messageController.text.isEmpty) return;

    try {
      _wsService.sendMessage(
        widget.recipientId,
        _messageController.text,
      );
      _messageController.clear();
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Failed to send message')),
      );
    }
  }

  @override
  void dispose() {
    _wsService.disconnect();
    _typingTimer?.cancel();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(widget.recipientUsername),
            if (_isTyping)
              Text(
                'typing...',
                style: TextStyle(
                  fontSize: 12,
                  fontStyle: FontStyle.italic,
                ),
              ),
          ],
        ),
      ),
      body: _isLoading
          ? Center(child: CircularProgressIndicator())
          : Column(
              children: [
                Expanded(
                  child: ListView.builder(
                    reverse: true,
                    itemCount: _messages.length,
                    itemBuilder: (context, index) {
                      final message = _messages[index];
                      final isMe = message.sender == currentUserId;

                      if (!message.isRead && !isMe) {
                        _markMessageAsRead(message);
                      }

                      return MessageBubble(
                        message: message,
                        isMe: isMe,
                        onEdit: (content) => _showEditDialog(message),
                        onDelete: () => _showDeleteConfirmation(message),
                      );
                    },
                  ),
                ),
                Padding(
                  padding: EdgeInsets.all(8.0),
                  child: Row(
                    children: [
                      Expanded(
                        child: TextField(
                          controller: _messageController,
                          decoration: InputDecoration(
                            hintText: 'Type a message...',
                            border: OutlineInputBorder(),
                          ),
                          onChanged: _onMessageChanged,
                        ),
                      ),
                      IconButton(
                        icon: Icon(Icons.send),
                        onPressed: _sendMessage,
                      ),
                    ],
                  ),
                ),
              ],
            ),
    );
  }
}
```

3. Best Practices
----------------
1. Implement automatic reconnection
2. Handle connection errors gracefully
3. Show connection status to users
4. Implement message queuing for offline mode
5. Add typing indicators
6. Implement proper error handling
7. Add loading states
8. Consider implementing retry logic
9. Add proper error messages
10. Test thoroughly

4. Error Handling
----------------
1. Network errors
2. Authentication errors
3. Server errors
4. Connection timeouts
5. Reconnection failures
6. Message delivery failures

5. Performance Considerations
---------------------------
1. Implement message queuing
2. Optimize WebSocket connections
3. Implement proper state management
4. Use proper loading indicators
5. Consider implementing offline support
6. Optimize message delivery

6. Security Considerations
------------------------
1. Implement proper authentication
2. Validate message data
3. Handle user sessions securely
4. Implement proper error handling
5. Add proper error messages
6. Test thoroughly

Remember to:
- Always handle WebSocket connection errors
- Implement proper reconnection logic
- Show connection status to users
- Handle offline mode gracefully
- Implement proper error handling
- Add loading indicators
- Consider implementing offline support
- Add proper error messages
- Test thoroughly 