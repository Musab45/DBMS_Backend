COMMENTS AND REPLIES IMPLEMENTATION GUIDE
=======================================

1. API Endpoints
---------------

a. Get Comments for a Post
GET /api/posts/{post_id}/comments/
Authentication Required: Yes (Bearer Token)

Request:
```
Headers:
Authorization: Bearer <your_jwt_token>
Content-Type: application/json

Parameters:
- post_id (path parameter): ID of the post
- page (query parameter, optional): Page number for pagination
- page_size (query parameter, optional): Number of comments per page
```

Response (200 OK):
```json
{
    "count": 25,
    "next": "http://api.example.com/api/posts/123/comments/?page=2",
    "previous": null,
    "results": [
        {
            "id": 1,
            "content": "Main comment",
            "created_at": "2024-03-20T10:00:00Z",
            "author_username": "user1",
            "author_user_id": 123,
            "likes_count": 5,
            "is_liked": false,
            "replies": [
                {
                    "id": 2,
                    "content": "Reply to comment 1",
                    "created_at": "2024-03-20T10:05:00Z",
                    "author_username": "user2",
                    "author_user_id": 456,
                    "likes_count": 2,
                    "is_liked": true,
                    "parent_id": 1
                }
            ]
        }
    ]
}
```

b. Create Comment
POST /api/posts/{post_id}/comments/
Authentication Required: Yes (Bearer Token)

Request:
```json
{
    "content": "Your comment text"
}
```

Response (201 Created):
```json
{
    "id": 1,
    "content": "Your comment text",
    "created_at": "2024-03-20T10:00:00Z",
    "author_username": "current_user",
    "author_user_id": 123,
    "likes_count": 0,
    "is_liked": false,
    "replies": []
}
```

c. Create Reply
POST /api/comments/{comment_id}/reply/
Authentication Required: Yes (Bearer Token)

Request:
```json
{
    "content": "Your reply text"
}
```

Response (201 Created):
```json
{
    "id": 2,
    "content": "Your reply text",
    "created_at": "2024-03-20T10:05:00Z",
    "author_username": "current_user",
    "author_user_id": 123,
    "likes_count": 0,
    "is_liked": false,
    "parent_id": 1
}
```

2. Frontend Implementation
-------------------------

a. Models
```dart
class Comment {
  final int id;
  final String content;
  final DateTime createdAt;
  final String authorUsername;
  final int authorUserId;
  final int likesCount;
  final bool isLiked;
  final List<Comment> replies;
  final int? parentId;

  Comment({
    required this.id,
    required this.content,
    required this.createdAt,
    required this.authorUsername,
    required this.authorUserId,
    required this.likesCount,
    required this.isLiked,
    required this.replies,
    this.parentId,
  });

  factory Comment.fromJson(Map<String, dynamic> json) {
    return Comment(
      id: json['id'],
      content: json['content'],
      createdAt: DateTime.parse(json['created_at']),
      authorUsername: json['author_username'],
      authorUserId: json['author_user_id'],
      likesCount: json['likes_count'],
      isLiked: json['is_liked'],
      replies: (json['replies'] as List?)
          ?.map((reply) => Comment.fromJson(reply))
          .toList() ?? [],
      parentId: json['parent_id'],
    );
  }
}
```

b. Comment Service
```dart
class CommentService {
  final String baseUrl;
  final String token;

  CommentService({required this.baseUrl, required this.token});

  Future<List<Comment>> getComments(int postId, {int page = 1}) async {
    try {
      final response = await http.get(
        Uri.parse('$baseUrl/api/posts/$postId/comments/?page=$page'),
        headers: {
          'Authorization': 'Bearer $token',
        },
      );

      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        final results = data['results'] as List;
        return results.map((json) => Comment.fromJson(json)).toList();
      } else {
        throw Exception('Failed to load comments');
      }
    } catch (e) {
      throw Exception('Failed to load comments: $e');
    }
  }

  Future<Comment> createComment(int postId, String content) async {
    try {
      final response = await http.post(
        Uri.parse('$baseUrl/api/posts/$postId/comments/'),
        headers: {
          'Authorization': 'Bearer $token',
          'Content-Type': 'application/json',
        },
        body: json.encode({'content': content}),
      );

      if (response.statusCode == 201) {
        return Comment.fromJson(json.decode(response.body));
      } else {
        throw Exception('Failed to create comment');
      }
    } catch (e) {
      throw Exception('Failed to create comment: $e');
    }
  }

  Future<Comment> createReply(int commentId, String content) async {
    try {
      final response = await http.post(
        Uri.parse('$baseUrl/api/comments/$commentId/reply/'),
        headers: {
          'Authorization': 'Bearer $token',
          'Content-Type': 'application/json',
        },
        body: json.encode({'content': content}),
      );

      if (response.statusCode == 201) {
        return Comment.fromJson(json.decode(response.body));
      } else {
        throw Exception('Failed to create reply');
      }
    } catch (e) {
      throw Exception('Failed to create reply: $e');
    }
  }
}
```

c. Comment Widget
```dart
class CommentWidget extends StatelessWidget {
  final Comment comment;
  final Function(String) onReply;
  final bool isReply;

  const CommentWidget({
    Key? key,
    required this.comment,
    required this.onReply,
    this.isReply = false,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Container(
      margin: EdgeInsets.only(
        left: isReply ? 32.0 : 0.0,
        bottom: 8.0,
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // Comment Header
          Row(
            children: [
              Text(
                comment.authorUsername,
                style: TextStyle(fontWeight: FontWeight.bold),
              ),
              SizedBox(width: 8.0),
              Text(
                _formatDate(comment.createdAt),
                style: TextStyle(color: Colors.grey),
              ),
            ],
          ),
          SizedBox(height: 4.0),
          
          // Comment Content
          Text(comment.content),
          SizedBox(height: 4.0),
          
          // Comment Actions
          Row(
            children: [
              IconButton(
                icon: Icon(
                  comment.isLiked ? Icons.favorite : Icons.favorite_border,
                  color: comment.isLiked ? Colors.red : null,
                ),
                onPressed: () {
                  // Handle like
                },
              ),
              Text('${comment.likesCount}'),
              TextButton(
                onPressed: () => onReply(comment.authorUsername),
                child: Text('Reply'),
              ),
            ],
          ),
          
          // Replies
          if (comment.replies.isNotEmpty)
            ...comment.replies.map((reply) => CommentWidget(
              comment: reply,
              onReply: onReply,
              isReply: true,
            )),
        ],
      ),
    );
  }

  String _formatDate(DateTime date) {
    // Implement date formatting
    return '2h ago'; // Example
  }
}
```

d. Comments Screen
```dart
class CommentsScreen extends StatefulWidget {
  final int postId;

  const CommentsScreen({
    Key? key,
    required this.postId,
  }) : super(key: key);

  @override
  _CommentsScreenState createState() => _CommentsScreenState();
}

class _CommentsScreenState extends State<CommentsScreen> {
  List<Comment> _comments = [];
  bool _isLoading = true;
  bool _hasError = false;
  int _currentPage = 1;
  bool _hasMore = true;
  final _commentController = TextEditingController();
  String? _replyingTo;

  @override
  void initState() {
    super.initState();
    _loadComments();
  }

  Future<void> _loadComments({bool refresh = false}) async {
    if (refresh) {
      setState(() {
        _currentPage = 1;
        _hasMore = true;
      });
    }

    if (!_hasMore || _isLoading) return;

    setState(() {
      _isLoading = true;
      _hasError = false;
    });

    try {
      final comments = await CommentService(
        baseUrl: 'YOUR_API_BASE_URL',
        token: 'YOUR_ACCESS_TOKEN',
      ).getComments(
        widget.postId,
        page: _currentPage,
      );

      setState(() {
        if (refresh) {
          _comments = comments;
        } else {
          _comments.addAll(comments);
        }
        _isLoading = false;
        _hasMore = comments.isNotEmpty;
        _currentPage++;
      });
    } catch (e) {
      setState(() {
        _isLoading = false;
        _hasError = true;
      });

      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Failed to load comments')),
      );
    }
  }

  Future<void> _submitComment() async {
    if (_commentController.text.isEmpty) return;

    try {
      final comment = await CommentService(
        baseUrl: 'YOUR_API_BASE_URL',
        token: 'YOUR_ACCESS_TOKEN',
      ).createComment(
        widget.postId,
        _commentController.text,
      );

      setState(() {
        _comments.insert(0, comment);
      });

      _commentController.clear();
      _replyingTo = null;
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Failed to post comment')),
      );
    }
  }

  Future<void> _submitReply(int commentId) async {
    if (_commentController.text.isEmpty) return;

    try {
      final reply = await CommentService(
        baseUrl: 'YOUR_API_BASE_URL',
        token: 'YOUR_ACCESS_TOKEN',
      ).createReply(
        commentId,
        _commentController.text,
      );

      setState(() {
        final index = _comments.indexWhere((c) => c.id == commentId);
        if (index != -1) {
          final comment = _comments[index];
          _comments[index] = Comment(
            id: comment.id,
            content: comment.content,
            createdAt: comment.createdAt,
            authorUsername: comment.authorUsername,
            authorUserId: comment.authorUserId,
            likesCount: comment.likesCount,
            isLiked: comment.isLiked,
            replies: [...comment.replies, reply],
          );
        }
      });

      _commentController.clear();
      _replyingTo = null;
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Failed to post reply')),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Comments'),
      ),
      body: Column(
        children: [
          Expanded(
            child: RefreshIndicator(
              onRefresh: () => _loadComments(refresh: true),
              child: _hasError && _comments.isEmpty
                  ? Center(
                      child: Column(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          Text('Failed to load comments'),
                          ElevatedButton(
                            onPressed: () => _loadComments(refresh: true),
                            child: Text('Retry'),
                          ),
                        ],
                      ),
                    )
                  : ListView.builder(
                      itemCount: _comments.length + (_hasMore ? 1 : 0),
                      itemBuilder: (context, index) {
                        if (index == _comments.length) {
                          if (!_isLoading) {
                            _loadComments();
                          }
                          return Center(
                            child: Padding(
                              padding: EdgeInsets.all(16.0),
                              child: CircularProgressIndicator(),
                            ),
                          );
                        }

                        return CommentWidget(
                          comment: _comments[index],
                          onReply: (username) {
                            setState(() {
                              _replyingTo = username;
                            });
                          },
                        );
                      },
                    ),
            ),
          ),
          Container(
            padding: EdgeInsets.all(8.0),
            decoration: BoxDecoration(
              color: Colors.white,
              boxShadow: [
                BoxShadow(
                  color: Colors.black12,
                  blurRadius: 4.0,
                ),
              ],
            ),
            child: Column(
              children: [
                if (_replyingTo != null)
                  Padding(
                    padding: EdgeInsets.only(bottom: 8.0),
                    child: Row(
                      children: [
                        Text(
                          'Replying to $_replyingTo',
                          style: TextStyle(color: Colors.blue),
                        ),
                        IconButton(
                          icon: Icon(Icons.close),
                          onPressed: () {
                            setState(() {
                              _replyingTo = null;
                            });
                          },
                        ),
                      ],
                    ),
                  ),
                Row(
                  children: [
                    Expanded(
                      child: TextField(
                        controller: _commentController,
                        decoration: InputDecoration(
                          hintText: 'Write a comment...',
                          border: OutlineInputBorder(),
                        ),
                        maxLines: null,
                      ),
                    ),
                    IconButton(
                      icon: Icon(Icons.send),
                      onPressed: _submitComment,
                    ),
                  ],
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }
}
```

3. Features
----------
1. Nested comments display
2. Reply functionality
3. Comment threading
4. Pagination
5. Pull-to-refresh
6. Loading states
7. Error handling
8. Like functionality
9. Visual hierarchy for replies

4. Best Practices
----------------
1. Implement proper error handling
2. Show loading indicators
3. Handle network errors
4. Implement retry functionality
5. Update UI optimistically
6. Handle state changes properly
7. Implement proper cleanup
8. Use proper indentation for replies
9. Clear visual hierarchy
10. Proper date formatting

5. Testing Checklist
-------------------
1. Basic Functionality:
   - Load comments
   - Create comments
   - Create replies
   - Like comments
   - Pagination works
   - Pull-to-refresh works

2. Error Cases:
   - Network errors
   - Server errors
   - Invalid responses
   - Empty comments
   - Failed comment creation
   - Failed reply creation

3. Edge Cases:
   - Long comments
   - Many replies
   - Deep nesting
   - Network disconnection
   - App backgrounding

4. UI/UX:
   - Proper indentation
   - Clear visual hierarchy
   - Loading states
   - Error messages
   - Reply indicators
   - Date formatting 